TEMPLATE_DIR = '/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Project Templates/Application/ShinyCocos Application'
APP_NAME     = "___PROJECTNAME___"
PROJECT      = "___PROJECTNAME___.xcodeproj"
TARGET       = APP_NAME
SDK_DEVICE   = "iphoneos3.1.2"
SDK_SIMUL    = "iphonesimulator3.1.2"
XCODEBUILD   = "/usr/bin/xcodebuild"

def xcodebuild_str(config = "Debug", sdk = SDK_SIMUL)
  "#{XCODEBUILD} -project '#{PROJECT}' -target '#{TARGET}' -sdk #{sdk} -configuration #{config}" 
end

def clean_xcode_output(cmd)
  f = IO.popen(cmd)
  while line = f.gets
    line = line.strip
    if md = line.match(/^CompileC ([^ ]+\.o) "?(.+\.m)"?/)
      fname = File.basename(md[2])
      puts "[GCC] Compiling #{fname}"
    elsif md = line.match(/^Ld ([^ ]+)/)
      fname = File.basename(md[1])
      puts "[LD] Linking #{fname}"
    elsif md = line.match(/^CpResource ([^ ]+) ([^ ]+)/)
      fname1 = File.basename(md[1])
      fname2 = File.basename(md[2])
      puts "[CP] #{fname1} to #{fname2}"
    # else
    #   puts "[DEBUG] #{line}"
    end
  end
end

desc "check ShinyCocos library version and update if a newer one is installed"
task :update_shinycocos do
  current = Dir["#{TEMPLATE_DIR}/ShinyCocos/lib/libShinyCocos-*.a"].first
  # just to make sure :-)
  if File.exists?(current) && md = current.match(/libShinyCocos-([\d\.]+).a/)
    svers = md[1]
    puts "Template lib: #{svers}"
    installed = Dir["#{ENV['PWD']}/ShinyCocos/lib/libShinyCocos-*.a"].first
    if installed
      ivers = installed.match(/libShinyCocos-(.+).a$/)[1]
      if ivers != svers
        puts "Updating ShinyCocos (current: #{ivers})"
        sh "rm -f ./ShinyCocos/lib/libShinyCocos*.a"
        # copy original files
        sh "cp '#{TEMPLATE_DIR}/ShinyCocos/lib/libShinyCocos-#{svers}.a' '#{ENV['PWD']}/ShinyCocos/lib'"
        sh "cp '#{TEMPLATE_DIR}/ShinyCocos/lib/libShinyCocosd-#{svers}.a' '#{ENV['PWD']}/ShinyCocos/lib'"
        # create links
        sh "cd ./ShinyCocos/lib && ln -s libShinyCocos-#{svers}.a libShinyCocos.a"
        sh "cd ./ShinyCocos/lib && ln -s libShinyCocosd-#{svers}.a libShinyCocosd.a"
      end
    end
  end
end

desc "builds the debug version of the app (for simulator)"
task :build_debug do
  puts "[SHINYCOCOS] Debug build started - #{Time.now}"
  clean_xcode_output "#{xcodebuild_str('Debug', SDK_SIMUL)} build"
  puts "[SHINYCOCOS] Debug build ended - #{Time.now}"
end

desc "removes the app from the simulator"
task :clean_simulator do
  dst_dir = "#{ENV['HOME']}/Library/Application Support/iPhone Simulator/User/Applications/#{APP_NAME}"
  rm_rf dst_dir
end

desc "installs the app on the simulator"
task :install_on_sim do
  dst_dir = "#{ENV['HOME']}/Library/Application Support/iPhone Simulator/User/Applications/#{APP_NAME}"

  mkdir_p dst_dir
  mkdir_p "#{dst_dir}/Documents"
  mkdir_p "#{dst_dir}/Library/Caches"
  mkdir_p "#{dst_dir}/Library/Preferences"
  mkdir_p "#{dst_dir}/tmp"
  # replate old binary
  rm_rf "#{dst_dir}/#{APP_NAME}.app"
  cp_r "build/Debug-iphonesimulator/#{APP_NAME}.app", dst_dir
end

desc "build application, then install and run on simulator"
task :debug => [:build_debug, :install_on_sim] do
  dst_dir = "#{ENV['HOME']}/Library/Application Support/iPhone Simulator/User/Applications/#{APP_NAME}"
  sh "./iphonesim launch '#{dst_dir}/#{APP_NAME}.app' 3.1.2"
end

=begin
TODO

* install on device (through iTunes)
* build for AppStore
=end
