TEMPLATE_DIR = '/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Project Templates/Application/ShinyCocos Application'
APP_NAME     = "___PROJECTNAME___"
PROJECT      = "___PROJECTNAME___.xcodeproj"
TARGET       = APP_NAME
SDK_VERS     = "3.1.2"
SDK_DEVICE   = "iphoneos#{SDK_VERS}"
SDK_SIMUL    = "iphonesimulator#{SDK_VERS}"
XCODEBUILD   = "/usr/bin/xcodebuild"

def xcodebuild_str(config = "Debug", sdk = SDK_SIMUL)
  "#{XCODEBUILD} -project '#{PROJECT}' -target '#{TARGET}' -sdk #{sdk} -configuration #{config}" 
end

def clean_xcode_output(cmd)
  f = IO.popen(cmd)
  while line = f.gets
    line = line.strip
    if md = line.match(/^CompileC ([^ ]+\.o) "?(.+\.m)"?/)
      fname = File.basename(md[2])
      puts "[GCC] Compiling #{fname}"
    elsif md = line.match(/^Ld ([^ ]+)/)
      fname = File.basename(md[1])
      puts "[LD] Linking #{fname}"
    elsif md = line.match(/^CpResource ([^ ]+) ([^ ]+)/)
      fname1 = File.basename(md[1])
      fname2 = File.basename(md[2])
      puts "[CP] #{fname1} to #{fname2}"
    # else
    #   puts "[DEBUG] #{line}"
    end
  end
end

desc "check ShinyCocos library version and update if a newer one is installed"
task :update_shinycocos do
  current = Dir["#{TEMPLATE_DIR}/ShinyCocos/lib/libShinyCocos-*.a"].first
  # just to make sure :-)
  if File.exists?(current) && md = current.match(/libShinyCocos-([\d\.]+).a/)
    svers = md[1]
    puts "Template lib: #{svers}"
    installed = Dir["#{ENV['PWD']}/ShinyCocos/lib/libShinyCocos-*.a"].first
    if (installed and (ivers = installed.match(/libShinyCocos-(.+).a$/)[1] && ivers != svers)) or !installed
      puts "Updating ShinyCocos (current: #{ivers})"
      sh "rm -f ./ShinyCocos/lib/libShinyCocos*.a"
      # copy original files
      sh "cp '#{TEMPLATE_DIR}/ShinyCocos/lib/libShinyCocos-#{svers}.a' '#{ENV['PWD']}/ShinyCocos/lib'"
      sh "cp '#{TEMPLATE_DIR}/ShinyCocos/lib/libShinyCocosd-#{svers}.a' '#{ENV['PWD']}/ShinyCocos/lib'"
      # create links
      sh "cd ./ShinyCocos/lib && ln -s libShinyCocos-#{svers}.a libShinyCocos.a"
      sh "cd ./ShinyCocos/lib && ln -s libShinyCocosd-#{svers}.a libShinyCocosd.a"
    end
  end
end

desc "builds the debug version of the app (for simulator)"
task :build_debug do
  sh "touch vendor"
  puts "[SHINYCOCOS] Debug build started - #{Time.now}"
  clean_xcode_output "#{xcodebuild_str('Debug', SDK_SIMUL)} build"
  puts "[SHINYCOCOS] Debug build ended - #{Time.now}"
end

desc "removes the app from the simulator"
task :clean_simulator do
  dst_dir = "#{ENV['HOME']}/Library/Application Support/iPhone Simulator/User/Applications/#{APP_NAME}"
  rm_rf dst_dir
end

desc "installs the app on the simulator"
task :install_on_sim do
  dst_dir = "#{ENV['HOME']}/Library/Application Support/iPhone Simulator/User/Applications/#{APP_NAME}"

  mkdir_p dst_dir
  mkdir_p "#{dst_dir}/Documents"
  mkdir_p "#{dst_dir}/Library/Caches"
  mkdir_p "#{dst_dir}/Library/Preferences"
  mkdir_p "#{dst_dir}/tmp"
  # replate old binary
  rm_rf "#{dst_dir}/#{APP_NAME}.app"
  cp_r "build/Debug-iphonesimulator/#{APP_NAME}.app", dst_dir
end

desc "build application, then install and run on simulator (ctrl-c to end session)"
task :debug => [:build_debug, :install_on_sim] do
  require 'tempfile'

  dst_dir = "#{ENV['HOME']}/Library/Application Support/iPhone Simulator/User/Applications/#{APP_NAME}"
  tf = Tempfile.new("shinycocos.log")

  # step 1: launch iphonesim with redirected stderr
  p1 = fork do
    ENV['STDERR'] = tf.path
    exec "'#{ENV['PWD']}/iphonesim' launch '#{dst_dir}/#{APP_NAME}.app' #{SDK_VERS}"
  end
  
  # step 2: launch a tail process on redirected stderr
  p2 = fork do
    # tail
    exec "tail -f '#{tf.path}'"
  end
  
  # step 3: activate iPhone Simulator
  sh "osascript -e 'tell application \"iPhone Simulator\"' -e 'activate' -e 'end tell'"
  
  # trap SIGINT
  Signal.trap("SIGINT") {
    # kill all on ctrl-c
    sh "killall 'iPhone Simulator'"
    Process.kill("QUIT", p1)
  }
  
  # clean the house
  Process.wait(p1)
  Process.kill("QUIT",p2)
  Process.wait(p2)
end

=begin
TODO

* install on device (through iTunes)
* build for AppStore

NOTE
to sign the binary without xcode (thanks to mobileorchard)

export CODESIGN_ALLOCATE=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate
codesign -f -s "iPhone Developer" _APP_NAME_.app

NOTE
install on device is something like this:

* open bundle with iTunes:
  open -b com.apple.itunes 'app_bundle'
* sync itunes:
  osascript -e 'tell application "iTunes" to update'

we should make sure that the device build has the proper Entitlements and can be signed properly
=end
